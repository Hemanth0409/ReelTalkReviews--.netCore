// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReelTalkReviews.Models;

#nullable disable

namespace ReelTalkReviews.Migrations
{
    [DbContext(typeof(ReelTalkReviewsContext))]
    [Migration("20231101062221_data")]
    partial class data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReelTalkReviews.Models.CastDetail", b =>
                {
                    b.Property<int>("CastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastId"));

                    b.Property<string>("LeadActor1As")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LeadActor2As")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LeadActor3As")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LeadActor4As")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LeadActor5As")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LeadActor6As")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LeadActor7As")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("LeadActorId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadActorId2")
                        .HasColumnType("int");

                    b.Property<int?>("LeadActorId3")
                        .HasColumnType("int");

                    b.Property<int?>("LeadActorId4")
                        .HasColumnType("int");

                    b.Property<int?>("LeadActorId5")
                        .HasColumnType("int");

                    b.Property<int?>("LeadActorId6")
                        .HasColumnType("int");

                    b.Property<int?>("LeadActorId7")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CastId")
                        .HasName("PK__CastData__68A1293C10E34199");

                    b.HasIndex("LeadActorId");

                    b.HasIndex("LeadActorId2");

                    b.HasIndex("LeadActorId3");

                    b.HasIndex("LeadActorId4");

                    b.HasIndex("LeadActorId5");

                    b.HasIndex("LeadActorId6");

                    b.HasIndex("LeadActorId7");

                    b.HasIndex("MovieId");

                    b.ToTable("CastDetail", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.Crew", b =>
                {
                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int?>("Cinematographer")
                        .HasColumnType("int");

                    b.Property<int?>("Director")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("MusicDirector")
                        .HasColumnType("int");

                    b.Property<int?>("Producer")
                        .HasColumnType("int");

                    b.Property<int?>("Writer")
                        .HasColumnType("int");

                    b.HasKey("CrewId")
                        .HasName("PK__Crew__89BCFC2982A905CD");

                    b.HasIndex("Cinematographer");

                    b.HasIndex("Director");

                    b.HasIndex("MovieId");

                    b.HasIndex("MusicDirector");

                    b.HasIndex("Producer");

                    b.HasIndex("Writer");

                    b.ToTable("Crew", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.FilmCertification", b =>
                {
                    b.Property<int>("FilmCertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilmCertificationId"));

                    b.Property<string>("Definition")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FilmCertificationType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("FilmCertificationId")
                        .HasName("PK__FilmCert__D924180A79F8CC4D");

                    b.ToTable("FilmCertification", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.FilmIndustryMember", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("IsActor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCinematographer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDirector")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMusicDirector")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProducer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWriter")
                        .HasColumnType("bit");

                    b.Property<string>("MemberDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MemberName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("MemberPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Place")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MemberId")
                        .HasName("PK__FilmIndu__0CF04B189FECCB58");

                    b.ToTable("FilmIndustryMember", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.MovieDetail", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int?>("FilmCertificationId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("MoviePoster")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("MovieRatingOverall")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<string>("MovieTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MovieType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("MovieId")
                        .HasName("PK__MovieDet__4BD2941ABBBD5697");

                    b.HasIndex("FilmCertificationId");

                    b.ToTable("MovieDetail", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.MoviePhoto", b =>
                {
                    b.Property<int>("MoviePicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoviePicId"));

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<byte[]>("MoviePhotos")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("MoviePicId")
                        .HasName("PK__MoviePho__61D4B0C1799619EC");

                    b.HasIndex("MovieId");

                    b.ToTable("MoviePhotos");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.MovieRating", b =>
                {
                    b.Property<int>("MovieRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieRatingId"));

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("review");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MovieRatingId")
                        .HasName("PK__MovieRat__AB2CC873E857B0AF");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieRating", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1A1E090515");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.UserDetail", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("DisplayPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("date");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("date");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__UserData__1788CC4C7EA3C4DE");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserName" }, "UQ__UserData__C9F28456C335EE04")
                        .IsUnique();

                    b.ToTable("UserDetail", (string)null);
                });

            modelBuilder.Entity("ReelTalkReviews.Models.CastDetail", b =>
                {
                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "LeadActor")
                        .WithMany("CastDetailLeadActors")
                        .HasForeignKey("LeadActorId")
                        .HasConstraintName("FK__CastData__LeadAc__2180FB33");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "LeadActorId2Navigation")
                        .WithMany("CastDetailLeadActorId2Navigations")
                        .HasForeignKey("LeadActorId2")
                        .HasConstraintName("FK__CastData__LeadAc__22751F6C");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "LeadActorId3Navigation")
                        .WithMany("CastDetailLeadActorId3Navigations")
                        .HasForeignKey("LeadActorId3")
                        .HasConstraintName("FK__CastData__LeadAc__236943A5");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "LeadActorId4Navigation")
                        .WithMany("CastDetailLeadActorId4Navigations")
                        .HasForeignKey("LeadActorId4")
                        .HasConstraintName("FK__CastData__LeadAc__245D67DE");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "LeadActorId5Navigation")
                        .WithMany("CastDetailLeadActorId5Navigations")
                        .HasForeignKey("LeadActorId5")
                        .HasConstraintName("FK__CastData__LeadAc__25518C17");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "LeadActorId6Navigation")
                        .WithMany("CastDetailLeadActorId6Navigations")
                        .HasForeignKey("LeadActorId6")
                        .HasConstraintName("FK__CastData__LeadAc__2645B050");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "LeadActorId7Navigation")
                        .WithMany("CastDetailLeadActorId7Navigations")
                        .HasForeignKey("LeadActorId7")
                        .HasConstraintName("FK__CastData__LeadAc__2739D489");

                    b.HasOne("ReelTalkReviews.Models.MovieDetail", "Movie")
                        .WithMany("CastDetails")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__CastData__MovieI__208CD6FA");

                    b.Navigation("LeadActor");

                    b.Navigation("LeadActorId2Navigation");

                    b.Navigation("LeadActorId3Navigation");

                    b.Navigation("LeadActorId4Navigation");

                    b.Navigation("LeadActorId5Navigation");

                    b.Navigation("LeadActorId6Navigation");

                    b.Navigation("LeadActorId7Navigation");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.Crew", b =>
                {
                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "CinematographerNavigation")
                        .WithMany("CrewCinematographerNavigations")
                        .HasForeignKey("Cinematographer")
                        .HasConstraintName("FK__Crew__Cinematogr__42E1EEFE");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "DirectorNavigation")
                        .WithMany("CrewDirectorNavigations")
                        .HasForeignKey("Director")
                        .HasConstraintName("FK__Crew__Director__40058253");

                    b.HasOne("ReelTalkReviews.Models.MovieDetail", "Movie")
                        .WithMany("Crews")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__Crew__MovieId__3F115E1A");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "MusicDirectorNavigation")
                        .WithMany("CrewMusicDirectorNavigations")
                        .HasForeignKey("MusicDirector")
                        .HasConstraintName("FK__Crew__MusicDirec__40F9A68C");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "ProducerNavigation")
                        .WithMany("CrewProducerNavigations")
                        .HasForeignKey("Producer")
                        .HasConstraintName("FK__Crew__Producer__41EDCAC5");

                    b.HasOne("ReelTalkReviews.Models.FilmIndustryMember", "WriterNavigation")
                        .WithMany("CrewWriterNavigations")
                        .HasForeignKey("Writer")
                        .HasConstraintName("FK__Crew__Writer__43D61337");

                    b.Navigation("CinematographerNavigation");

                    b.Navigation("DirectorNavigation");

                    b.Navigation("Movie");

                    b.Navigation("MusicDirectorNavigation");

                    b.Navigation("ProducerNavigation");

                    b.Navigation("WriterNavigation");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.MovieDetail", b =>
                {
                    b.HasOne("ReelTalkReviews.Models.FilmCertification", "FilmCertification")
                        .WithMany("MovieDetails")
                        .HasForeignKey("FilmCertificationId")
                        .HasConstraintName("FK__MovieDeta__FilmC__6E01572D");

                    b.Navigation("FilmCertification");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.MoviePhoto", b =>
                {
                    b.HasOne("ReelTalkReviews.Models.MovieDetail", "Movie")
                        .WithMany("MoviePhotos")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__MoviePhot__Movie__756D6ECB");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.MovieRating", b =>
                {
                    b.HasOne("ReelTalkReviews.Models.MovieDetail", "Movie")
                        .WithMany("MovieRatings")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK__MovieRati__Movie__797309D9");

                    b.HasOne("ReelTalkReviews.Models.UserDetail", "User")
                        .WithMany("MovieRatings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__MovieRati__UserI__7A672E12");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.UserDetail", b =>
                {
                    b.HasOne("ReelTalkReviews.Models.Role", "Role")
                        .WithMany("UserDetails")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__UserDetai__RoleI__3C34F16F");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.FilmCertification", b =>
                {
                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.FilmIndustryMember", b =>
                {
                    b.Navigation("CastDetailLeadActorId2Navigations");

                    b.Navigation("CastDetailLeadActorId3Navigations");

                    b.Navigation("CastDetailLeadActorId4Navigations");

                    b.Navigation("CastDetailLeadActorId5Navigations");

                    b.Navigation("CastDetailLeadActorId6Navigations");

                    b.Navigation("CastDetailLeadActorId7Navigations");

                    b.Navigation("CastDetailLeadActors");

                    b.Navigation("CrewCinematographerNavigations");

                    b.Navigation("CrewDirectorNavigations");

                    b.Navigation("CrewMusicDirectorNavigations");

                    b.Navigation("CrewProducerNavigations");

                    b.Navigation("CrewWriterNavigations");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.MovieDetail", b =>
                {
                    b.Navigation("CastDetails");

                    b.Navigation("Crews");

                    b.Navigation("MoviePhotos");

                    b.Navigation("MovieRatings");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.Role", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("ReelTalkReviews.Models.UserDetail", b =>
                {
                    b.Navigation("MovieRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
